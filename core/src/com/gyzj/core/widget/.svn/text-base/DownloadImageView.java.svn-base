/*package com.gyzj.core.widget;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.math.BigDecimal;

import org.apache.http.Header;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.media.ThumbnailUtils;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.Log;
import android.view.WindowManager;
import android.widget.ImageView;

import com.example.core.R;
import com.gyzj.core.util.cache.FileCache;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.FileAsyncHttpResponseHandler;
import com.loopj.android.http.RequestHandle;

*//**
 * 会自己下载图片的imageview
 * 
 * @author 陈晓磊/Michael Chen
 * @date 2014年5月9日
 *//*
public class DownloadImageView extends ImageView {

	private Context ctx;

	private String url;

	*//**
	 * 请求句柄
	 *//*
	private RequestHandle requestHandle;
	
	
	

	public void setURL(String url) {
		this.url = url;
	}

	public String getURL() {
		return url;
	}
	
	
	
	

	public DownloadImageView(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		ctx = context;
	}

	public DownloadImageView(Context context, AttributeSet attrs) {
		super(context, attrs);
		ctx = context;
	}

	public DownloadImageView(Context context) {
		super(context);
		ctx = context;
	}

	public void loadImage(final String url) {
		loadImage(url, null, null);
	}
	
	
	
	
	
	
	

	public void loadImage(final String url, final LoadWatcher loadWatcher) {
		loadImage(url, null, loadWatcher);
	}

	*//**
	 * 加载图片
	 * 
	 * @param url
	 *            要加载的路径
	 * @param option
	 *            这个参数先别用，还没测试稳定
	 * @param loadWatcher
	 *            加载监控类
	 *//*
	@SuppressWarnings("deprecation")
	public void loadImage(final String url, final Options option,
			final LoadWatcher loadWatcher) {
		if (TextUtils.isEmpty(url)) {
			Log.i(this.getClass().getName(), "url is empty!");
			if (loadWatcher != null) {
				loadWatcher.onLoadFinish();
			}
			return;
		}

		// 如果文件已经存在就直接给路径
		String filePath = FileCache.getInstance().getFilePath(url);

		if (TextUtils.isEmpty(filePath) == false) {
			File f = new File(filePath);
			if (f.isDirectory() == false && f.exists()) {
				this.url = filePath;
				BitmapDrawable drawable = null;
				try {
					FileInputStream is = new FileInputStream(f);
					Bitmap bit = null;
					if (option != null && option.targetWidth > 0
							&& option.targetHeigth > 0) {
						Bitmap tmp = BitmapFactory.decodeStream(is);

						bit = ThumbnailUtils.extractThumbnail(tmp,
								option.targetWidth, option.targetHeigth,
								ThumbnailUtils.OPTIONS_RECYCLE_INPUT);
					} else {
						bit = BitmapFactory.decodeStream(is);
					}

					drawable = new BitmapDrawable(bit);
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				if (getTag() != null
						&& getTag().toString().equalsIgnoreCase(url)) {
					setBackgroundDrawable(drawable);
				} else if (getTag() == null) {
					setBackgroundDrawable(drawable);
				}

				setImageBitmap(null);

				if (loadWatcher != null) {
					loadWatcher.onLoadFinish();
				}
				return;
			}
		}

		// 如果文件不存在，则要去下载
		AsyncHttpClient ahc = new AsyncHttpClient();
		ahc.setMaxRetriesAndTimeout(3, 10 * 1000);
		requestHandle = ahc.get(url, new FileAsyncHttpResponseHandler(ctx) {

			@Override
			public void onSuccess(int statusCode, final File file) {
				super.onSuccess(statusCode, file);
				if (file != null) {
					try {
						FileInputStream is = new FileInputStream(file);

						android.graphics.BitmapFactory.Options options = new android.graphics.BitmapFactory.Options();
						options.inJustDecodeBounds = true;

						BitmapFactory.decodeStream(is, null, options);
						is.close();
						WindowManager wm = (WindowManager) getContext()
								.getSystemService(Context.WINDOW_SERVICE);
						int screenWidth = wm.getDefaultDisplay().getWidth();
						options.inSampleSize = new BigDecimal(options.outWidth)
								.divide(new BigDecimal(screenWidth),
										BigDecimal.ROUND_HALF_EVEN).intValue();
						options.inJustDecodeBounds = false;

						is = new FileInputStream(file);
						Bitmap bit = null;

						bit = BitmapFactory.decodeStream(is, null, options);
						is.close();

						BitmapDrawable drawable = null;

						drawable = new BitmapDrawable(bit);

						setBackgroundDrawable(drawable);
						setImageBitmap(null);

						// 创建压缩图片
						CompressFormat format = Bitmap.CompressFormat.JPEG;
						int quality = 100;
						OutputStream stream = null;

						File dir = new File(FileCache.getInstance()
								.getImgFileDir());
						if (dir.exists() == false && dir.isDirectory() == false) {
							dir.mkdirs();
						}

						DownloadImageView.this.url = FileCache.getInstance()
								.getImgFileName();

						stream = new FileOutputStream(
								DownloadImageView.this.url);

						drawable.getBitmap().compress(format, quality, stream);

						// 缓存文件地址
						FileCache.getInstance().cacheFilePath(ctx, url,
								DownloadImageView.this.url);

					} catch (FileNotFoundException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}

				}
			}

			@Override
			public void onFailure(int statusCode, Header[] headers,
					byte[] responseBody, Throwable error) {
				super.onFailure(statusCode, headers, responseBody, error);
				error.printStackTrace();
				setBackgroundResource(R.drawable.imagebreak);
			}

			@Override
			public void onFinish() {
				super.onFinish();
				if (loadWatcher != null) {
					loadWatcher.onLoadFinish();
				}
			}
		});
	}

	*//**
	 * 直接结束加载
	 *//*
	public void finishLoad() {
		if (requestHandle != null && requestHandle.isFinished() == false
				&& requestHandle.isCancelled() == false) {
			requestHandle.cancel(true);
		}
	}

	*//**
	 * 选项类
	 *//*
	public static class Options {
		public int targetWidth;

		public int targetHeigth;
	}

	*//**
	 * 加载观察者回调
	 * 
	 * @author 陈晓磊/Michael Chen
	 * @date 2014年5月16日
	 *//*
	public interface LoadWatcher {
		*//**
		 * 加载完成
		 *//*
		public void onLoadFinish();
	}

}
*/